name: release

on:
  push:
    branches:
      - master

env:
  versionFileName: 'VERSION'
  versionFragmentFileName: 'version_fragment'
  changelogFileName: 'CHANGELOG.md'
jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      releaseVersion: ${{ steps.exposeVersion.outputs.releaseVersion }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Get version fragment to bump
        id: getVersionFragment
        run: |
          read -r versionFragment < ${{ env.versionFragmentFileName }}
          echo "'$versionFragment' version will be used"
          echo "::set-env name=VERSION_FRAGMENT::${versionFragment}"

      - name: Generate versions
        uses: HardNorth/github-version-generate@v1.0.1
        with:
          version-source: file
          version-file: ${{ env.versionFileName }}
          next-version-increment-patch: ${{ contains(env.VERSION_FRAGMENT, 'patch') }}
          next-version-increment-minor: ${{ contains(env.VERSION_FRAGMENT, 'minor')  }}
          next-version-increment-major: ${{ contains(env.VERSION_FRAGMENT, 'major')  }}

      - name: Expose release version
        id: exposeVersion
        run: |
          versionFragment=${{ env.VERSION_FRAGMENT }}
          if [[ "$versionFragment" != "patch" ]]; then
            echo "::set-output name=releaseVersion::${{ env.NEXT_VERSION }}"
          else
            echo "::set-output name=releaseVersion::${{ env.RELEASE_VERSION }}"
          fi

  create-tag:
    needs: calculate-version
    runs-on: ubuntu-latest
    outputs:
      versionInfo: ${{ steps.readChangelogEntry.outputs.log_entry }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure git
        run: |
          git config --global user.email "reportportal.io"
          git config --global user.name "reportportal.io"
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
      - name: Update VERSION file
        run: |
          echo "${{ needs.calculate-version.outputs.releaseVersion }}" > ${{ env.versionFileName }}
          git status
          git add ${{ env.versionFileName }}
          git commit -m "Update VERSION file with ${{ needs.calculate-version.outputs.releaseVersion }}"
      - name: Create tag
        run: |
          git tag -a v${{ needs.calculate-version.outputs.releaseVersion }} -m ${{ needs.calculate-version.outputs.releaseVersion }}
          npm version from-git
          git push origin master
      - name: Update version in changelog file
        run: |
          releaseDate=$(date +'%Y-%m-%d')
          echo "Release date: $releaseDate"
          versionInfo="## [${{ needs.calculate-version.outputs.releaseVersion }}] - $releaseDate"
          sed -i '1s/^/\n'"$versionInfo"'\n/' ${{ env.changelogFileName }}
          git status
          git add ${{ env.changelogFileName }}
          git commit -m "Mention ${{ needs.calculate-version.outputs.releaseVersion }} version in changelog file"
          git push origin master
      - name: Read changelog Entry
        id: readChangelogEntry
        uses: mindsers/changelog-reader-action@v1.1.0
        with:
          version: ${{ needs.calculate-version.outputs.releaseVersion }}
          path: ./${{ env.changelogFileName }}

      - name: Generate versions
        uses: HardNorth/github-version-generate@v1.0.1
        with:
            version: ${{ needs.calculate-version.outputs.releaseVersion }}
            next-version-increment-patch: true

      - name: Update develop with snapshot version
        run: |
          git fetch
          git checkout develop
          git merge master -Xtheirs --allow-unrelated-histories
          next_version="${{ env.NEXT_VERSION }}-SNAPSHOT"
          echo "${next_version}" > ${{ env.versionFileName }}
          git status
          git add ${{ env.versionFileName }}
          git commit -m "${{ needs.calculate-version.outputs.releaseVersion }} -> ${next_version}"
          git push origin develop

  create-release:
    needs: [calculate-version, create-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Create Release
        id: createRelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ needs.calculate-version.outputs.releaseVersion }}
          release_name: Release v${{ needs.calculate-version.outputs.releaseVersion }}
          body: ${{ needs.create-tag.outputs.versionInfo }}
          draft: false
          prerelease: false
